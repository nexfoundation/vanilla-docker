version: "3.5"

services:
    # httpd:
    #     build:
    #         context: "./images/httpd"
    #     container_name: "httpd"
    #     depends_on:
    #         - "php-fpm"
    #     networks:
    #         - "vanilla_network"
    #     ports:
    #         - "9080:9080"
    #         - "9443:9443"
    #     volumes:
    #         - "shared:/shared:cached" # allow to use the php-fpm socket
    #         - "./logs/httpd:/var/log/httpd:delegated"
    #         - "./resources/certificates:/certificates:cached"
    #         - "./resources/usr/local/apache2/conf.d:/usr/local/apache2/conf.d:cached"
    #         - "../:/srv/vanilla-repositories:cached"

    nginx:
        build:
            context: "./images/nginx"
        # Transform the template into an actual file
        restart: unless-stopped
        command: >
            /bin/bash -c "envsubst < /etc/nginx/fastcgi.conf.tpl > /etc/nginx/fastcgi.conf && nginx -g 'daemon off;'"
            && "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        container_name: "nginx"
        depends_on:
            - "php-fpm"
        environment:
            - "DOLLAR=$$"
            - "FASTCGI_SPLIT_PATH_INFO=${VANILLA_DOCKER_FASTCGI_SPLIT_PATH_INFO}"
            - "FASTCGI_INTERCEPT_ERRORS=${VANILLA_DOCKER_FASTCGI_INTERCEPT_ERRORS}"
            - "FASTCGI_IGNORE_CLIENT_ABORT=${VANILLA_DOCKER_FASTCGI_IGNORE_CLIENT_ABORT}"
            - "FASTCGI_CONNECT_TIMEOUT=${VANILLA_DOCKER_FASTCGI_CONNECT_TIMEOUT}"
            - "FASTCGI_SEND_TIMEOUT=${VANILLA_DOCKER_FASTCGI_SEND_TIMEOUT}"
            - "FASTCGI_READ_TIMEOUT=${VANILLA_DOCKER_FASTCGI_READ_TIMEOUT}"
            - "FASTCGI_BUFFER_SIZE=${VANILLA_DOCKER_FASTCGI_BUFFER_SIZE}"
            - "FASTCGI_BUFFERS=${VANILLA_DOCKER_FASTCGI_BUFFERS}"
            - "FASTCGI_BUSY_BUFFERS_SIZE=${VANILLA_DOCKER_FASTCGI_BUSY_BUFFERS_SIZE}"
            - "FASTCGI_TEMP_FILE_WRITE_SIZE=${VANILLA_DOCKER_FASTCGI_TEMP_FILE_WRITE_SIZE}"
        networks:
            vanilla_network:
                aliases: # Allows (sso|dev).vanilla.localhost to be resolved internally from php-fpm
                    - "sso.vanilla.localhost"
                    - "dev.vanilla.localhost"
                    - "vanilla.test"
                    - "vanilla.localhost"
        ports:
            - "80:80"
            - "8080:8080"
            - "443:443"
        volumes:
            - "shared:/shared:cached" # allow to use the php-fpm socket
            - "./logs/nginx:/var/log/nginx:delegated"
            - "./resources/certificates:/certificates:cached"
            - "./resources/etc/nginx/conf.d:/etc/nginx/conf.d:cached"
            - "./resources/etc/nginx/sites-available:/etc/nginx/sites-available:cached"
            - "./resources/etc/nginx/sites-enabled:/etc/nginx/sites-enabled:cached"
            - "../:/srv/vanilla-repositories:cached"
            - "./data/certbot/conf:/etc/letsencrypt"
            - "./data/certbot/www:/var/www/certbot"
    certbot:
        image: "certbot/certbot"
        restart: unless-stopped
        volumes:
            - "./data/certbot/conf:/etc/letsencrypt"
            - "./data/certbot/www:/var/www/certbot"
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    # Don't forget to update docker-compose.unit-test.yml
    php-fpm:
        build:
            context: "./images/php-fpm"
        restart: unless-stopped
        container_name: "php-fpm"
        environment: &php-env
            - "TEST_BASEURL"
            - "TEST_DB_HOST"
            - "TEST_DB_NAME"
            - "TEST_DB_USER"
            - "TEST_DB_PASSWORD"
        networks: &php-networks
            - "vanilla_network"
        volumes: &php-volumes
            - "shared:/shared:cached" # expose php-fpm socket
            - "./logs/php-fpm:/var/log/php-fpm:delegated"
            - "./resources/certificates:/usr/local/share/ca-certificates:cached" # Mount extra certificates
            - "./resources/sphinx:/sphinx:cached" # expose sphinx API. We have to do this here because we need to be enable to update the plugin before we can start the container.
            - "../:/srv/vanilla-repositories:cached"
    # php-fpm-xdebug:
    #     build:
    #         context: "./images/php-fpm"
    #         dockerfile: DockerfileXDebug
    #     container_name: "php-fpm-xdebug"
    #     environment: *php-env
    #     networks: *php-networks
    #     volumes: *php-volumes

volumes:
    shared:

networks:
    vanilla_network:
        driver: "bridge"
        name: "vanilla_network"
